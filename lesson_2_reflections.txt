What happens when you initialize a repository? Why do you need to do it?
	
	It adds a .git directory inside your current directory so that it can have a place to store the metadata about the history of the respository.

How is the staging area different from the working directory and the repository?
What value do you think it offers?
	
	It is a place between the working directory and the repository that allows you to choose which files you want to add to the repository.

How can you use the staging area to make sure you have one commit per logical
change?

	You can view what is in the staging area and either add more to it or take files out so that you commit exactly what you want.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

	If you wanted to experiment with some code that will drastically change the code you have in your master branch, creating another branch would be a good idea until you have worked out all of the kinks in your experiment.

How do the diagrams help you visualize the branch structure?

	The diagrams clear up where each branch/commit is in relation to one another and who the parent is for each commit.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

	By merging two branches, you are keeping the commits of both and combining them together. It is represented in this way in the diagram so that it is clear that you are ending with one joint commit but also have a history of commits from both branches.

What are the pros and cons of Git’s automatic merging vs. always doing merges
manually?

	Pro: Git is smart enough to merge branches together when they do not have overlapping changes and to ask you about them when they do overlap.
	Con: It can be tedious to go through and fix merge conflicts that are obvious to you since you know the code.
 
